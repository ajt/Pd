#N canvas 312 62 943 650 12;
#X obj 190 301 + 1;
#X obj 493 227 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 668 148 cnv 15 198 138 empty empty empty 20 12 0 14 -228856
-66577 0;
#N canvas 91 30 450 300 (subpatch) 0;
#X array sequencer 16 float 2;
#X coords 0 12 16 -12 200 140 1;
#X restore 667 147 graph;
#X obj 144 325 mod 16;
#X floatatom 144 348 5 0 0 0 - - -, f 5;
#X text 870 275 -12;
#X text 871 143 12;
#X obj 144 371 tabread sequencer;
#X obj 181 417 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-base empty 0 -8
0 10 -228856 -1 -1 60 256;
#X obj 144 415 +;
#X floatatom 144 392 5 0 0 0 - - -, f 5;
#X obj 144 459 mtof;
#X obj 144 510 osc~;
#X obj 173 538 *~;
#X obj 144 484 t f b;
#X floatatom 144 436 5 0 0 0 - - -, f 5;
#X obj 696 471 mtof;
#X obj 696 526 osc~;
#X obj 543 510 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-base empty 0 -8
0 10 -228856 -1 -1 60 256;
#X obj 763 471 nbx 5 14 0 200 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 757 452 portamento;
#X obj 173 569 out~;
#X obj 696 556 out~;
#X obj 493 277 setmess;
#X obj 493 254 array get sequencer;
#X obj 144 301 float;
#X obj 191 511 decay2~ 50 500;
#X obj 487 134 array set sequencer;
#X obj 696 497 glide~ 100;
#X obj 531 405 tempo 180 -on;
#X text 29 95 The native [tabread] object is used to read values from
the array \, then we sum it to the base value and convert to hz. Note
we're using floats \, not integers \, hence our sequence is out of
the 12 tone equally tempered scale., f 62;
#X obj 144 277 metro 350;
#X text 74 247 Play/Stop;
#X text 67 312 counter =>;
#X text 68 348 0 to 15 =>;
#X text 29 157 We need a metronome and a counter to generate indexes
of our sequence stored in the array. The sequence has 16 elements (so
the indexes need to be from 0 to 15). The native metro object is used
and we also have a counter with the native [mod] object to keep values
in the desired range (0 to 15)., f 62;
#X obj 302 314 tempo 160 -on;
#X floatatom 302 363 5 0 0 0 - - -, f 5;
#X obj 302 338 count 15;
#X text 246 267 An alternative with ELSE objects could use [tempo]
and [count], f 19;
#X obj 144 244 tgl 25 0 empty \$0-metro empty 17 7 0 10 -228856 -1
-1 1 1;
#X obj 487 95 initmess -5.14286 -7.88572 -7.2 -2.4 -7.2 1.2 4.8 4.11429
-2.4 -4.28572 -4.28572 -0.685715 2.22857 6.17143 7.3 7.1;
#X text 514 225 get values, f 13;
#X obj 541 478 value i;
#X text 593 479 (index);
#X text 470 344 Now here's an alternative with [expr] \, which can
read values from a table and use variables from a [value] object.;
#X text 240 412 transposition (base value), f 13;
#X text 29 17 Let's implement a sequencer using arrays to store values
\, which could be used to control any parameter in a patch but here
we just control the MIDI pitch of an oscillator. In this example we
store values from -12 to 12 and add it to base value (initially 60
\, which is middle C)., f 62;
#X obj 60 558 initmess \; \$0-base 60 \; \$0-metro 1;
#X obj 543 535 v base;
#X obj 531 428 expr i = (i + 1) % 16 \; int(sequencer[i] + base);
#X msg 493 300;
#X text 484 18 Find below the array used as a sequencer. It is initiaized
with the native [array set] object. You can also change the values
with your mouse and retrieve the values with [array get].;
#X connect 0 0 26 1;
#X connect 1 0 25 0;
#X connect 4 0 5 0;
#X connect 4 0 0 0;
#X connect 5 0 8 0;
#X connect 8 0 11 0;
#X connect 9 0 10 1;
#X connect 10 0 16 0;
#X connect 11 0 10 0;
#X connect 12 0 15 0;
#X connect 13 0 14 0;
#X connect 14 0 22 0;
#X connect 14 0 22 1;
#X connect 15 0 13 0;
#X connect 15 1 27 0;
#X connect 16 0 12 0;
#X connect 17 0 29 0;
#X connect 18 0 23 0;
#X connect 18 0 23 1;
#X connect 19 0 50 0;
#X connect 20 0 29 1;
#X connect 24 0 52 0;
#X connect 25 0 24 0;
#X connect 26 0 4 0;
#X connect 27 0 14 1;
#X connect 29 0 18 0;
#X connect 30 0 51 0;
#X connect 32 0 26 0;
#X connect 37 0 39 0;
#X connect 39 0 38 0;
#X connect 41 0 32 0;
#X connect 42 0 28 0;
#X connect 51 1 17 0;
