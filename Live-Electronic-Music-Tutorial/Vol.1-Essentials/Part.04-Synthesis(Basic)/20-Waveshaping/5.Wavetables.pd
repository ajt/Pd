#N canvas 295 50 1064 592 12;
#X obj 53 200 wrap~;
#X floatatom 53 20 5 0 0 0 - - -;
#X obj 53 54 osc~ 40;
#X obj 351 202 loadbang;
#X obj 349 370 cnv 15 278 178 empty empty empty 20 12 0 14 -233017
-66577 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-shape 4099 float 0;
#X coords 0 1 4098 -1 280 180 1;
#X restore 348 369 graph;
#X msg 362 260 cosinesum 4096 0 1 1 0.3 0.2 0.9 \, normalize;
#X obj 351 291 send \$0-shape;
#X obj 53 273 tabread4~ \$0-shape;
#X obj 53 149 expr~ $v1 * 0.5 + 0.5;
#X obj 53 90 *~;
#X obj 115 50 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 118 26 hsl 128 15 0 8 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X text 149 25 amplitude;
#X msg 351 226 sinesum 4096 1 0.5 1 0.3 0.2 0.9 \, normalize;
#X obj 53 237 expr~ $v1 * 4096 + 1;
#X obj 53 308 hip~ 5;
#X floatatom 766 221 5 0 0 0 - - -;
#X obj 766 255 osc~ 40;
#X obj 766 287 *~;
#X obj 830 274 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 833 250 hsl 128 15 0 8 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X text 864 249 amplitude;
#X obj 766 338 shaper~ \$0-shape;
#X obj 766 377 out~;
#X obj 68 352 out~;
#X obj 53 419 graph~ 500 13;
#X obj 115 94 line~;
#X msg 115 70 \$1 10;
#X text 64 122 values from -1 a 1;
#X text 65 173 rescaling to 0 a 1;
#X text 99 200 wrap between 0 e 1;
#X text 202 232 map to indices (1 - 4097), f 14;
#X text 186 274 transfer function;
#X text 102 308 filter DC Offset;
#X text 294 21 Now we'll get back to working with tables as transfer
functions and use "sinesum" e "cosinesum" to generate wavetables. Not
that these waveforms are particularly pertinent to waveshaping \, but
what's stoping us? To the left we have a plain vanilla patch \, with
every necessary step to implement a waveshaper., f 53;
#X text 293 115 A general characteristic of waveshaping is that the
input amplitude affects the overall result. Here we even go beyong
the -1 to 1 range and wrap it inside the table range \, which keeps
affecting the output., f 53;
#X obj 830 298 f2s~ 10;
#X text 695 87 The [shaper~] object has already been introduced as
a convenient object for waveshaping. It automatically wraps the audio
input and does everything the patch to the left is doing! It also has
a DC filter and everything., f 48;
#X text 695 158 Not only that \, but it is also good for chebyshev
functios as we'll see in the next example., f 48;
#X connect 0 0 15 0;
#X connect 1 0 2 0;
#X connect 2 0 10 0;
#X connect 3 0 14 0;
#X connect 6 0 7 0;
#X connect 8 0 16 0;
#X connect 9 0 0 0;
#X connect 10 0 9 0;
#X connect 11 0 28 0;
#X connect 12 0 11 0;
#X connect 14 0 7 0;
#X connect 15 0 8 0;
#X connect 16 0 25 0;
#X connect 16 0 25 1;
#X connect 16 0 26 0;
#X connect 17 0 18 0;
#X connect 18 0 19 0;
#X connect 19 0 23 0;
#X connect 20 0 37 0;
#X connect 21 0 20 0;
#X connect 23 0 24 0;
#X connect 23 0 24 1;
#X connect 27 0 10 1;
#X connect 28 0 27 0;
#X connect 37 0 19 1;
