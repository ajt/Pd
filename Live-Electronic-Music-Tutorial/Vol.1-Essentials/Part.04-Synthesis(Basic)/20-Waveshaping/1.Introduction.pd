#N canvas 345 86 854 621 12;
#X obj 96 229 nbx 5 19 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 14
-228856 -1 -1 0 256;
#X obj 99 203 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X text 131 202 Clipping;
#X msg 96 178 1;
#N canvas 192 26 538 370 input 1;
#X obj 183 304 outlet~;
#X obj 107 200 + 1;
#X obj 107 121 vradio 20 1 0 3 empty empty empty 0 -8 0 10 -228856
-1 -1 0;
#X text 132 164 [adc~];
#X obj 107 48 loadbang;
#X msg 107 75 0;
#X obj 165 210 osc~ 440;
#X obj 278 212 adc~ 1;
#X text 131 142 Sample;
#X obj 183 253 xselect~ 3 100;
#X text 130 123 Sine;
#X obj 230 184 player~ ../../../samples/guitar.wav 1 1;
#X obj 230 155 sel 2;
#X connect 1 0 9 0;
#X connect 1 0 12 0;
#X connect 2 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X connect 6 0 9 0;
#X connect 7 0 9 2;
#X connect 9 0 0 0;
#X connect 11 0 9 1;
#X connect 12 0 11 0;
#X coords 0 -1 1 1 80 90 1 100 100;
#X restore 475 44 pd input;
#X text 84 277 1;
#X text 78 393 -1;
#X text 85 336 0;
#X text 195 416 0;
#X text 89 418 -1;
#X text 293 419 1;
#N canvas 124 311 764 359 shape 0;
#X msg 129 145 0;
#X msg 114 73 \; pd dsp 1;
#X obj 45 86 delay 500;
#X obj 167 241 clip~ -1 1;
#X obj 195 217 * -1;
#X obj 185 104 t b f;
#X obj 87 168 vsaw~ 100 1;
#X obj 45 49 loadbanger 2;
#X obj 185 20 inlet;
#X obj 301 118 cnv 15 198 138 empty empty empty 20 12 0 14 -228856
-66577 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-shape 441 float 0;
#X coords 0 1.1 440 -1.1 200 140 1 0 0;
#X restore 300 117 graph;
#X obj 117 299 tabwrite~ \$0-shape;
#X connect 0 0 6 2;
#X connect 2 0 0 0;
#X connect 2 0 11 0;
#X connect 3 0 11 0;
#X connect 4 0 3 1;
#X connect 5 0 0 0;
#X connect 5 0 11 0;
#X connect 5 1 4 0;
#X connect 5 1 3 2;
#X connect 6 0 3 0;
#X connect 7 0 2 0;
#X connect 7 1 1 0;
#X connect 8 0 5 0;
#X coords 0 -1 1 1 200 157 2 300 100;
#X restore 96 258 pd shape;
#X text 68 340 p;
#X text 68 289 |;
#X text 68 279 |;
#X text 68 386 |;
#X text 68 376 |;
#X obj 433 262 out~;
#X obj 541 234 graph~ 268 5;
#X text 33 549 Você pode desenhar na tabela de Função de Transferência
e ver o resultado. Para ressetar \, basta clicar na mensagem "1" ligada
ao slider horizontal acima.;
#X obj 610 465 osc~ 100;
#X obj 610 527 out~;
#X obj 475 154 rescale~ 0 440;
#X text 160 450 (table indices);
#X text 111 435 ---- audio signal input -----;
#X text 68 304 O;
#X text 68 317 u;
#X text 68 329 t;
#X text 68 351 u;
#X text 68 361 t;
#X text 123 178 Reset;
#X text 13 88 Here we use Waveshaping for a simple clipping distortion
for didactical purposes \, as it makes it easy to visualize how it
works. First we have a linear function that does not alter the input.
But by moving the slider and seting a maximum amplitude value we can
generate a clipping function.;
#X text 411 182 transfer function, f 9;
#X obj 475 190 tabread4~ \$0-shape;
#X obj 610 493 shaper~ \$0-shape;
#X text 236 222 TRANSFER FUNCTION:, f 9;
#X text 33 484 Above to the right we have an input signal going through
the transfer function. First we use [rescale~] to adjust the audio
range from (-1 to 1) to the table indices (0 to 440) \, then use it
to read the table with [tabread4~].;
#X text 13 6 The Waveshaping technique is based on the idea of a transfer
function where an input signal goes through. We can use a table in
Pd for that \, such as below. The audio input is the indices and represents
the horizontal axis \, whereas the output are the values from the vertical
axis.;
#X text 572 55 Like Ring Modulation \, Waveshaping can be used outside
the context of synthesis as an effects processor. It's widely used
as a distortion unit \, for example., f 34;
#X text 456 406 The [shaper~] object \, from ELSE \, is optimized for
waveshaping and automatically rescales audio input signals (between
-1 and 1) to the indices of a given table., f 48;
#X connect 0 0 11 0;
#X connect 1 0 0 0;
#X connect 3 0 1 0;
#X connect 4 0 22 0;
#X connect 20 0 34 0;
#X connect 22 0 33 0;
#X connect 33 0 17 0;
#X connect 33 0 17 1;
#X connect 33 0 18 0;
#X connect 34 0 21 0;
#X connect 34 0 21 1;
