#N canvas 674 96 503 539 12;
#X obj 150 462 out~;
#X obj 193 423 sine~;
#X obj 193 355 +~;
#X obj 193 389 mtof~;
#X obj 143 200 nbx 5 14 24 90 0 0 empty \$0-carrier empty 0 -8 0 10
-228856 -1 -1 60 256;
#X obj 143 227 f2s~ 10;
#X obj 211 286 sine~;
#X obj 211 319 *~;
#X obj 267 286 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-index empty 0 -8
0 10 -228856 -1 -1 28 256;
#X obj 267 311 f2s~ 10;
#X obj 211 258 mtof~;
#X text 138 177 Carrier;
#X text 266 264 Index;
#X obj 211 200 nbx 5 14 24 90 0 0 empty \$0-mod empty 0 -8 0 10 -228856
-1 -1 34 256;
#X obj 211 227 f2s~ 10;
#X text 214 177 Mod.;
#X text 43 14 It's also possible to work with exponential MIDI pitch
values rather than a linear frequency input. Note that the difference
here is that the frequency deviation (that is \, the modulation index)
is now in semitones \, not hertz!;
#X obj 273 369 initmess \; \$0-carrier 60 \; \$0-mod 34 \; \$0-index
28;
#X text 267 198 (deviation in MIDI values);
#X text 43 81 This does change the overall modulating signal. We basically
have a different and non simmetrical waveform as a result \, ehich
promotes a distinct behaviour and output. The main difference in the
patch is to just use [mtof~] to convert to hertz!;
#X connect 1 0 0 0;
#X connect 1 0 0 1;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 5 0;
#X connect 5 0 2 0;
#X connect 6 0 7 0;
#X connect 7 0 2 1;
#X connect 8 0 9 0;
#X connect 9 0 7 1;
#X connect 10 0 6 0;
#X connect 13 0 14 0;
#X connect 14 0 10 0;
