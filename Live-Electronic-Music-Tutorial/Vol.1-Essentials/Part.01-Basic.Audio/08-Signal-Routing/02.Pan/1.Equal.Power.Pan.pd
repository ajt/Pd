#N struct 1009-point float x0 float y0 float s;
#N struct 1009-grid float x0 float y0 float s;
#N canvas 364 58 893 564 12;
#X obj 40 266 osc~ 400;
#X obj 262 267 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 6350 1;
#X obj 259 293 nbx 5 16 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 12
-228856 -1 -1 0.5 256;
#X text 332 293 Posição (0-1);
#X floatatom 614 176 5 0 0 0 - - -;
#X obj 617 154 hsl 128 15 -1 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 6350 1;
#X obj 369 357 v pi;
#X obj 550 158 noise~;
#X obj 369 331 pi;
#X obj 550 192 pan2~;
#X obj 190 402 out~;
#X obj 40 399 meter2~;
#X obj 539 232 out~;
#X obj 40 309 expr~ $v1 * cos($v2 * pi/2) \; $v1 * sin($v2 * pi/2)
;
#X obj 326 435 setdsp~ 1;
#X text 38 19 "Panning" or just "pan" distributes a mono signal into
a stereo field. The "pan" control allows you to distribute a sound
source more to the right or to the left., f 56;
#X text 38 66 This is rather similar to crossfading \, but instead
of mixing two sound sources into an output \, we kinda do the opposite.
Check the implementation below and see how the process depends on a
same structure than the crossfading \, and how we also adopt the sine/cosine
functions., f 56;
#X text 225 267 left;
#X text 397 266 right;
#X text 37 159 Since we have a Sine/Coine function \, we have an "Equal
Power Panning". Similarly than the equal power crossfade \, at the
middle point \, we have a -3 dB attenuation for both channels., f
56;
#X text 695 128 middle point;
#X obj 614 129 initmess 0;
#X text 362 239 middle point;
#X obj 259 244 initmess 0.5;
#X floatatom 662 407 5 0 0 0 - - -;
#X floatatom 731 406 5 0 0 0 - - -;
#X obj 594 458 env~;
#X obj 639 458 env~;
#X obj 685 458 env~;
#X obj 731 458 env~;
#X obj 731 483 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 89.2879 256;
#X obj 594 349 noise~;
#X obj 685 483 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 89.2879 256;
#X obj 639 482 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 89.2879 256;
#X obj 594 482 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 89.2879 256;
#X text 638 499 left;
#X text 638 513 front;
#X text 684 512 front;
#X text 684 498 right;
#X text 592 499 left;
#X text 731 498 right;
#X text 593 513 back;
#X text 732 512 back;
#X text 647 405 X;
#X text 711 406 Y;
#X obj 594 431 else/pan4~, f 20;
#X obj 662 310 else/slider2d -size 64 -range -1 1;
#X text 458 23 The [pan2~] object \, from the ELSE library \, is the
same as the implementation below to the left \, but the pan parameter
is from -1 to 1 (instead of 0 to 1). This makes it more suitable for
controlling it with audio signals. Check also the [pan4~] object \,
which is a 4 speakers panning object.;
#X obj 662 382 unpack f f;
#X obj 259 320 f2s~ 20;
#X obj 614 199 f2s~ 20;
#X connect 0 0 13 0;
#X connect 1 0 2 0;
#X connect 2 0 49 0;
#X connect 4 0 50 0;
#X connect 5 0 4 0;
#X connect 7 0 9 0;
#X connect 8 0 6 0;
#X connect 9 0 12 0;
#X connect 9 1 12 1;
#X connect 13 0 10 0;
#X connect 13 0 11 0;
#X connect 13 1 10 1;
#X connect 13 1 11 1;
#X connect 21 0 5 0;
#X connect 23 0 1 0;
#X connect 24 0 45 1;
#X connect 25 0 45 2;
#X connect 26 0 34 0;
#X connect 27 0 33 0;
#X connect 28 0 32 0;
#X connect 29 0 30 0;
#X connect 31 0 45 0;
#X connect 45 0 26 0;
#X connect 45 1 27 0;
#X connect 45 2 28 0;
#X connect 45 3 29 0;
#X connect 46 0 48 0;
#X connect 48 0 24 0;
#X connect 48 1 25 0;
#X connect 49 0 13 1;
#X connect 50 0 9 1;
