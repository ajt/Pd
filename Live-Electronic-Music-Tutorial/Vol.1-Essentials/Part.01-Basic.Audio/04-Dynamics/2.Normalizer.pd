#N canvas 404 33 895 473 12;
#X obj 334 418 nbx 4 17 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 13
-228856 -1 -1 -20 256;
#X text 393 419 dBFS;
#X obj 114 230 meter~;
#X obj 71 393 out~;
#X obj 388 259 setdsp~ 1;
#X obj 260 230 meter~ 4096 4096;
#X obj 334 394 rint;
#X obj 217 393 out~;
#X obj 278 20 initmess -20;
#X obj 278 45 nbx 4 17 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 13
-228856 -1 -1 -20 256;
#X text 339 47 dBFS;
#X obj 316 107 mov.rms~ 1024;
#X obj 278 132 /~;
#X obj 278 70 db2lin~;
#X obj 316 133 display~ 5;
#X obj 260 202 *~;
#X obj 278 168 display~ 5;
#X obj 489 253 norm~ -30 -size 1024;
#X obj 489 281 meter~ 4096 4096;
#X text 325 171 <= ratio;
#X text 440 67 It is also based on [mov.rms~] to give us a running
RMS analysis. The adjustment is with a simple division between the
target amplitude and the running RMS. The result is a ratio that we
use to multiply the input so we can reach the target., f 61;
#X text 469 168 This patch is implemented in the [norm~] abstraction
from the ELSE library. Check it below \, open its help file.;
#X text 561 316 This process can be used in conjunction to a noise
gate (in an earlier stage) to avoid that a noise floor is raised to
the normalized value!, f 41;
#X text 440 26 This realtime normalizer patch continuously adjusts
the gain to a fixed RMS value., f 61;
#X obj 489 225 play.file~ 1 ../../../samples/MouthBow.wav 1 1;
#X obj 35 44 play.file~ 1 ../../../samples/kantele.wav 1 1, f 32;
#X connect 2 0 3 1;
#X connect 2 0 3 0;
#X connect 5 0 7 0;
#X connect 5 0 7 1;
#X connect 5 1 6 0;
#X connect 6 0 0 0;
#X connect 8 0 9 0;
#X connect 9 0 13 0;
#X connect 11 0 14 0;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 12 1;
#X connect 15 0 5 0;
#X connect 16 0 15 1;
#X connect 17 0 18 0;
#X connect 24 0 17 0;
#X connect 25 0 11 0;
#X connect 25 0 2 0;
#X connect 25 0 15 0;
