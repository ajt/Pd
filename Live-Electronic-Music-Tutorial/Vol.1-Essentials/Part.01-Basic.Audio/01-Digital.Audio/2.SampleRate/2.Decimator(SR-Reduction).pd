#N canvas 343 67 870 339 12;
#X obj 677 190 downsample~;
#X obj 767 50 initmess \; \$0-sr 44100;
#X obj 530 177 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 44100 256;
#X obj 533 154 hsl 100 15 400 44099 1 0 empty \$0-sr empty -2 -8 0
10 -228856 -1 -1 9900 1;
#X text 590 177 Hertz;
#X obj 488 236 out~;
#X obj 488 200 sh~;
#X obj 530 201 impulse~;
#X obj 751 169 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 44100 256;
#X obj 754 146 hsl 100 15 400 44099 1 0 empty \$0-sr empty -2 -8 0
10 -228856 -1 -1 9900 1;
#X text 809 167 Hertz;
#X obj 677 226 out~;
#X obj 471 89 send~ \$0-audio;
#X obj 488 130 receive~ \$0-audio;
#X obj 677 116 receive~ \$0-audio;
#X text 24 37 The "decimator" is a process that consist in reducing
the sample rate of a signal. Im other words \, it reduces the sample
rate \, or performs a "downsampling"., f 59;
#X text 24 87 We can still perform downsampling if we do not actually
reduce the sample rate \, but we need to do an upsampling to go back
to the original sample rate., f 59;
#X text 24 142 In the upsampling process \, there aren't that many
options. One is to "hold" \, where we keep the same value for all the
new sample values. One way to implement this is with [sh~] \, from
ELSE \, which is a "sample and hold" unit that collects a sample value
when receiving impulses and holds such values until the next trigger.
The frequency at wich it receives impulses is the downsampled frequency.
, f 59;
#X text 25 250 A simpler alternative is to use [downsample~] from ELSE
\, which only needs a downsampling frequency value., f 59;
#X obj 471 50 play.file~ ../../../../samples/bubul.wav 1 1, f 33;
#X text 472 24 [play.file~] plays audio files;
#X connect 0 0 11 0;
#X connect 0 0 11 1;
#X connect 2 0 7 0;
#X connect 3 0 2 0;
#X connect 6 0 5 0;
#X connect 6 0 5 1;
#X connect 7 0 6 1;
#X connect 8 0 0 1;
#X connect 9 0 8 0;
#X connect 13 0 6 0;
#X connect 14 0 0 0;
#X connect 19 0 12 0;
