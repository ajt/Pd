#N canvas 394 23 541 668 12;
#X text 245 261 1;
#X text 244 376 0;
#X text 261 392 0;
#X obj 64 361 osc~;
#X obj 41 430 tabwrite~ \$0-hann;
#X msg 89 336 0.5;
#X obj 260 270 cnv 15 198 118 empty empty empty 20 12 0 14 -228856
-66577 0;
#N canvas 0 22 450 300 (subpatch) 0;
#X array \$0-hann 2048 float 0;
#X coords 0 1 2047 0 200 120 1;
#X restore 259 269 graph;
#X text 55 22 We've seen that FFT expects periodic signals that match
its harmonic series \, but that's not what happens in practice. For
spectral processing we use STFTs and the analisys is done in a sound
grain \, with the size of the audio block., f 60;
#X text 55 85 When we apply an envelope in the grain \, the analysis
result has less artifcts \, and it's also forced to become periodic.
This envelope is called "window" in the context of FFT. The hann function
is an important window type \, and we've used it already for envelopes.
It can be obtained from a cosine function.;
#X text 283 392 ---- window size ----;
#X obj 152 301 block~ 2048;
#X obj 319 623 hann~;
#X obj 41 285 nbx 7 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 21.5332 256;
#X obj 41 253 blocksize~ -hz;
#X obj 41 312 t b f b;
#X text 104 362 inverted cosine;
#X obj 64 390 rescale~;
#X text 55 176 This example shows how to generate a hann frunction
with [osc~]. We need to find a frequency that matches the block size
\, which can be given by [blocksize~]., f 60;
#X text 444 393 2048;
#X text 129 390 rescale (0 to 1), f 8;
#X text 36 550 The ELSE library provides the [hann~] object \, which
is an abstraction that already appllies a hann window into its input.
It calculates the hann function in a different way. Check its help
file.;
#X obj 341 475 tabreceive~ \$0-hann;
#X obj 323 503 *~;
#X text 118 472 After generating an array \, you can access it with
the [tabreceive~] object., f 26;
#X connect 3 0 17 0;
#X connect 5 0 3 1;
#X connect 13 0 15 0;
#X connect 14 0 13 0;
#X connect 15 0 4 0;
#X connect 15 1 3 0;
#X connect 15 2 5 0;
#X connect 17 0 4 0;
#X connect 22 0 23 1;
