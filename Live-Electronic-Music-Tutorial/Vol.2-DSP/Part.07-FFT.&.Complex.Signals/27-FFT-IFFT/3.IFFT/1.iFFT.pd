#N canvas 352 76 916 515 12;
#X floatatom 311 263 5 0 0 0 - - -, f 5;
#N canvas 262 23 567 466 FFT-iFFT 0;
#X obj 85 119 rfft~;
#X obj 85 15 inlet~;
#X obj 84 383 outlet~;
#X obj 84 153 rifft~;
#X obj 337 283 block~ 2048 4;
#X obj 85 67 hann~;
#X obj 84 198 hann~;
#X text 282 257 block size / overlaps;
#X obj 148 242 blocksize~;
#X obj 84 290 /~;
#X obj 148 278 * 4;
#X obj 148 308 * 0.375;
#X text 198 78 In this example now we use Hann windows. Note we also
need a Hann window after the inverse transform. The normalization factor
now is different because of the hann windows \, we need to also multiply
by 0.375 (more details about this are in the next example in this tutorial
series)., f 40;
#X connect 0 0 3 0;
#X connect 0 1 3 1;
#X connect 1 0 5 0;
#X connect 3 0 6 0;
#X connect 5 0 0 0;
#X connect 6 0 9 0;
#X connect 8 0 10 0;
#X connect 9 0 2 0;
#X connect 10 0 11 0;
#X connect 11 0 9 1;
#X restore 311 367 pd FFT-iFFT;
#X obj 311 290 sig~ 100;
#X obj 311 324 bl.saw~;
#X obj 268 412 out~;
#N canvas 262 23 627 412 FFT-iFFT 0;
#X obj 83 133 rfft~;
#X obj 83 29 inlet~;
#X obj 81 347 outlet~;
#X obj 81 187 rifft~;
#X text 299 112 block size / overlaps;
#X obj 81 254 /~;
#X obj 350 138 block~ 2048 4;
#X obj 149 269 * 4;
#X obj 149 235 blocksize~;
#X text 136 137 Fourier Transform;
#X text 139 188 Inverse Fourier Transform;
#X text 236 258 Normalization factor: block size * overlaps;
#X connect 0 0 3 0;
#X connect 0 1 3 1;
#X connect 1 0 0 0;
#X connect 3 0 5 0;
#X connect 5 0 2 0;
#X connect 7 0 5 1;
#X connect 8 0 7 0;
#X restore 152 350 pd FFT-iFFT;
#X obj 152 389 display~;
#X obj 152 315 sig~;
#X obj 152 285 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 57 306 setdsp~;
#X text 433 27 LATENCY: FFT analysis and resynthesis produces a latency
equal to the hop size (number of samples between overlaps).;
#X text 45 23 The native objects [ifft~] and [rifft~] perform the inverse
transform \, from the frequency domain to the amplitude domain. This
is \, above all \, a mathematical conversion between these domains.
But since the fourier transform decomposes a signal into sine components
\, you can interpret the inverse transform as an additive synthesis
\, but this is not a good comparison as we'll see., f 48;
#X text 435 71 IMPORTANT: Please realize that the amplitude information
from a FFT analysis doesn't mean the orignal sound has sine components
that match the harmonic series of that FFT. But this may be the idea
given with the additive synthesis metaphor and that's what problematic
about it.;
#X text 435 154 You just cannot resynthesize any input sound with a
single FFT frame \, this is not how FFT works. If that was it \, it
would only synthesize sounds with that harmonic series'components.
;
#X text 435 219 How does it do it then? Well \, the initial phase information
is also important! But we know that changing the initial phase of sine
components does not change much \, and it'll still keep the same harmonic
series. Where's the catch then?;
#X text 436 284 First of all \, FFT resynthesis is much more related
to granulation than additive synthesis! this is the secret. And when
a sound input that does not match the harmonic is analyzed \, each
FFT frame has a different initial phase. Because if we were talking
about a sine component that was a perfect harmonic \, it would fit
right in a frequency bin and the initial phase wouldn't change from
one frame to another.;
#X text 437 398 So this is how the initial phase information ends up
codifying the actual tonal content of the analysis \, and then a granular
overlap is able to recreate the original signal. This should become
clearer when we move on to the practical examples.;
#X text 44 143 Let's first have a look at it from a conversion perspective.
See how the value is converted to and back. It needs a normalization
though. Open the subpatch below to the left for more details. Then
check the sawtooth being transformed to the frequency domain and back
and open the subprach to the right for more details., f 48;
#X connect 0 0 2 0;
#X connect 1 0 4 0;
#X connect 1 0 4 1;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 5 0 6 0;
#X connect 7 0 5 0;
#X connect 8 0 7 0;
