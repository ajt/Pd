#N canvas 400 145 948 467 12;
#X obj 234 240 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 234 305 display~;
#X obj 237 217 hsl 128 15 0 1 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X obj 95 299 display~;
#X obj 97 276 tabosc4~ \$0-table;
#X obj 688 354 display~;
#N canvas 797 150 450 300 table 0;
#X obj 55 77 cnv 15 298 198 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X array \$0-table 67 float 0;
#X coords 0 1 66 -1 300 200 1 0 0;
#X restore 54 77 graph;
#X obj 167 21 else/initmess \; \$0-table sinesum 64 1 1 1 \, normalize
, f 26;
#X restore 450 270 pd table;
#X obj 688 327 tabread4~ \$0-table;
#X obj 640 414 display~;
#X obj 234 275 table~ \$0-table;
#X obj 640 286 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 643 260 hsl 128 15 0 66 0 0 empty empty empty -2 -8 0 10 -228856
-1 -1 0 1;
#X text 32 132 In this mode \, it relates to [tabosc4~] \, which can
be used as a table reader with the phase input. Compare below and see
how they provide the same results.;
#X text 32 69 By default \, it's in "guard points mode" \, where it
considers there are 3 extra points needed for interpolation and that
they should not be accessed. Thus \, the index input from 0 to 1 ignores
the guard points.;
#X text 491 12 More precisely \, they ignore the first index of the
table \, so accessing index 0 gives the same output as index 1! They
can read up to n-2 \, which is supposed to be the same as index 1 \,
but do not read the last index (n-1).;
#X obj 640 387 table~ \$0-table 0 1;
#X msg 567 328 guard \$1;
#X obj 567 309 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 0
1;
#X text 38 352 When not in "guard points mode" \, [table~] doesn't
consider there are guard points and accesses all points in the table.
On the other hand \, [tabread4] and [tabread4~] always consider the
existance of guard points and do not read all indexes.;
#X text 491 187 When not in guard point mode \, [table~] access all
indexes from 0 to 66 \, but when in guard points mode it works just
as [tabread4~] and ignores the first and last index.;
#X text 32 20 The [table~] object from ELSE is much like [tabread4~].
By default \, the index input is normalized (from 0 to 1). It can also
either acess the guard points or ignore them.;
#X text 491 77 We can compare the [table~] and [tabread4~] objects
below. Now [table~] is initialized to work not in "guard points mode".
It's also set to "index" mode \, where indexes are not normalized.
The table was initialized with the sinesum command \, and creates a
table with 64 points plus 3 guard points \, so we have 67 points and
indexes from 0 to 66 - move the slider below to acess index values.
;
#X connect 0 0 4 1;
#X connect 0 0 9 0;
#X connect 2 0 0 0;
#X connect 4 0 3 0;
#X connect 7 0 5 0;
#X connect 9 0 1 0;
#X connect 10 0 7 0;
#X connect 10 0 15 0;
#X connect 11 0 10 0;
#X connect 15 0 8 0;
#X connect 16 0 15 0;
#X connect 17 0 16 0;
