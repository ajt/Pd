#N canvas 559 58 517 481 12;
#N canvas 134 49 349 226 delwrite~ 0;
#X obj 58 40 inlet~;
#X obj 103 149 outlet~;
#X text 163 152 dummy outlet;
#X obj 57 87 delwrite~ \$0-delay 100;
#X connect 0 0 3 0;
#X restore 171 271 pd delwrite~;
#N canvas 164 51 380 221 delread4~ 0;
#X obj 133 43 inlet~;
#X obj 209 145 outlet~;
#X text 33 43 dummy intlet;
#X obj 209 110 delread4~ \$0-delay;
#X obj 209 44 inlet~;
#X connect 3 0 1 0;
#X connect 4 0 3 0;
#X restore 171 311 pd delread4~;
#X obj 153 238 noise~;
#X obj 277 262 osc~ 0.1;
#X obj 153 347 +~;
#X obj 153 384 out~;
#X obj 277 287 rescale~ 0 10;
#X text 40 25 The order of execution was presented in the beggining
of this tutorial (Vol.1 - 01.Digital_Audio) \, and it can define if
there may be a block delay or not. Let's remind it because it's really
important in the context of delay objects. The way to force an order
of execution is by connecting subpatches with "dummy" inlets/outlets.
;
#X text 40 119 This example implements a flanger type effect by summing
a noise input to its delayed signal. By forcing an order of execution
\, we can be assured the minimum delay can be less than a block of
audio (1 sample in the case of [delread4~] and 0 samples in the case
of [delread~]).;
#X connect 0 0 1 0;
#X connect 1 0 4 1;
#X connect 2 0 0 0;
#X connect 2 0 4 0;
#X connect 3 0 6 0;
#X connect 4 0 5 0;
#X connect 4 0 5 1;
#X connect 6 0 1 1;
